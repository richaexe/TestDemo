import express, { Request, Response } from "express";
import multer from "multer";
import fs from "fs";
import path from "path";
import { uploadFileToOneDrive, getFilesFromOneDrive, deleteFileFromOneDrive } from "../services/oneDriveService";

export const adminRouter = express.Router();

// Multer Configuration
const storage = multer.memoryStorage();
const upload = multer({ storage });

/**
 * @route POST /upload-file
 * @desc Uploads a file and stores it in OneDrive
 */
adminRouter.post("/upload-file", upload.single("file"), async (req: Request, res: Response) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "No file uploaded." });
    }

    const { entityId } = req.body;
    if (!entityId) {
      return res.status(400).json({ error: "Entity ID is required." });
    }

    // Temporarily save file
    const tempFilePath = `./uploads/${req.file.originalname}`;
    fs.writeFileSync(tempFilePath, req.file.buffer);

    // Upload to OneDrive
    const oneDriveFileId = await uploadFileToOneDrive(tempFilePath, Number(entityId));
    fs.unlinkSync(tempFilePath); // Remove temporary file

    return res.status(201).json({ message: "File uploaded successfully.", oneDriveFileId });
  } catch (error: any) {
    console.error("Error uploading file:", error.message);
    return res.status(500).json({ error: error.message || "Failed to upload file." });
  }
});

/**
 * @route GET /get-entities-files/:entityId
 * @desc Retrieves the list of files for a given entity
 */
adminRouter.get("/get-entities-files/:entityId", async (req: Request, res: Response) => {
  try {
    const { entityId } = req.params;
    if (!entityId) {
      return res.status(400).json({ error: "Entity ID is required." });
    }

    const files = await getFilesFromOneDrive(Number(entityId));
    return res.status(200).json({ files });
  } catch (error: any) {
    console.error("Error fetching files:", error.message);
    return res.status(500).json({ error: error.message || "Failed to fetch files." });
  }
});

/**
 * @route DELETE /delete-file/:fileId
 * @desc Deletes a file from OneDrive
 */
adminRouter.delete("/delete-file/:fileId", async (req: Request, res: Response) => {
  try {
    const { fileId } = req.params;
    if (!fileId) {
      return res.status(400).json({ error: "File ID is required." });
    }

    await deleteFileFromOneDrive(fileId);
    return res.status(200).json({ message: "File deleted successfully." });
  } catch (error: any) {
    console.error("Error deleting file:", error.message);
    return res.status(500).json({ error: error.message || "Failed to delete file." });
  }
});
