
import express from "express";
import { Request, Response, NextFunction } from 'express';
import cors from "cors";
import cookieParser from "cookie-parser";
import path from "path";
import helmet from "helmet";
import logger from "./config/logger";
import { v4 as uuidv4 } from 'uuid';
import './config/sendEmailJob'

import { dbSync } from "./db/connection";
import { errorHandler } from "./middleware/error";
import { CORS_OPTIONS } from "./constants/apiConstants";
import deserializeUser from "./middleware/deseralizeUser";
import appRouter from "./routes";

const app = express();
const PORT = process.env.PORT || 3000;

// security and standard middleware
app.use(helmet({
  frameguard: { action: 'deny' } // prevents iframe embedding
}));
interface RequestWithTransactionId extends Request {
  transactionId?: string;
}

app.use((req: RequestWithTransactionId, res: Response, next: Function) => {
  req.transactionId = uuidv4();
  logger.info(`Request: ${req.method} ${req.url}`, { transactionId: req.transactionId });
  next();
});
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ limit: '10mb', extended: false }));
app.use(cors(CORS_OPTIONS));
app.use(cookieParser());

// auth middleware
app.use(deserializeUser);

// static file handling
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

// api routes
app.use("/api", appRouter);

// healt check endpoint
app.get("/api/", (req, res) => {
  res.status(200).json({ 
    msg: "server is up..", 
    user: (req as any).user || null
  });
});

// db sync endpoint
app.patch("/api/sync", async (req, res, next) => {
  try {
    const syncResult = await dbSync();
    res.status(200).json({ ...syncResult, error: false });
  } catch (error) {
    next(error);
  }
});

// err handling middleware 
app.use(errorHandler);

// start server
app.listen(PORT, () => {
  logger.info(`Server is running on port ${PORT}`);
  console.log(`Server running on port ${PORT}`);
});

export default app;
