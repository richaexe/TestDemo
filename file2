import express from "express";
import { Request, Response, NextFunction } from "express";
import cors from "cors";
import cookieParser from "cookie-parser";
import path from "path";
import helmet from "helmet";
import logger from "./config/logger";
import { v4 as uuidv4 } from "uuid";
import "./config/sendEmailJob";
import prisma, { dbSync } from "./db/connection"; // Correct import for Prisma and dbSync
import { errorHandler } from "./middleware/error";
import { CORS_OPTIONS } from "./constants/apiConstants";
import deserializeUser from "./middleware/deseralizeUser";
import appRouter from "./routes";

const app = express();
const PORT = process.env.PORT || 3000;

// Security and standard middleware
app.use(
  helmet({
    frameguard: { action: "deny" }, // Prevents iframe embedding
  })
);

interface RequestWithTransactionId extends Request {
  transactionId?: string;
}

app.use((req: RequestWithTransactionId, res: Response, next: NextFunction) => {
  req.transactionId = uuidv4();
  logger.info(`Request: ${req.method} ${req.url}`, {
    transactionId: req.transactionId,
  });
  next();
});

app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ limit: "10mb", extended: false }));
app.use(cors(CORS_OPTIONS));
app.use(cookieParser());

// Auth middleware
app.use(deserializeUser);

// Static file handling
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

// API routes
app.use("/api", appRouter);

// Health check endpoint
app.get("/api/health", async (req: Request, res: Response) => {
  const healthCheck = {
    uptime: process.uptime(),
    timestamp: new Date(),
    application: "running",
    database: "pending",
  };

  // Check Database Connection
  try {
    await prisma.$queryRaw`SELECT 1`; // Quick DB check
    healthCheck.database = "connected";
  } catch (error) {
    healthCheck.database = `error: ${(error as Error).message}`;
  }

  res.status(200).json(healthCheck);
});

// DB sync endpoint
app.patch("/api/sync", async (req, res, next) => {
  try {
    const syncResult = await dbSync();
    res.status(200).json({ ...syncResult, error: false });
  } catch (error) {
    next(error);
  }
});

// Error handling middleware
app.use(errorHandler);

// Start server
app.listen(PORT, async () => {
  try {
    await prisma.$connect(); // Ensure DB is connected before starting server
    logger.info("Database connected!");
  } catch (error) {
    logger.error("Database connection failed:", error);
  }
  
  logger.info(`Server is running on port ${PORT}`);
  console.log(`Server running on port ${PORT}`);
});

export default app;
